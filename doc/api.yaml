openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: Catch
  description: |-
    This API is for the Android App Catch
  version: 1.0.0
tags:
  - name: Users
  - name: Games
paths:
  /users:
    post:
      tags: ["Users"]
      operationId: register
      summary: Register a new User
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The userid of the user
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
        required: true
      responses:
        "201":
          description: User registration successful
          content:
            application/json:
              schema:
                description: The identifier of the user
                type: object
                properties:
                  identifier:
                    $ref: "#/components/schemas/id"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/location:
    parameters:
      - $ref: "#/components/parameters/userId"
    post:
      tags: ["Users"]
      operationId: uploadLocation
      summary: Upload your current location
      description: |
        Post a users new location.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/location"
        required: true
      responses:
        "201": { description: Location posted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /games:
    post:
      tags: ["Games"]
      operationId: createGame
      summary: Create a new game
      description: |
        Create a new game and obtain the games id in the response
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  gameLength:
                    $ref: "#/components/schemas/time"
        required: true
      responses:
        "204":
          description: Game creation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    $ref: "#/components/schemas/id"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
     
  /games/{gid}:
    parameters:
      - $ref: "#/components/parameters/gameId"
    get:
      tags: ["Games"]
      operationId: getProof
      summary: Get the state of a game
      description: |
        Returns the state of a game which includes gameId, gameState (created/running/finished), 
        the time left in the game, the players of the game with their GPS locations 
        and the last catch made.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            The posts metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gameState"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /games/{gid}/players/{uid}:
    parameters:
      - $ref: "#/components/parameters/gameId"
      - $ref: "#/components/parameters/userId"
    put:
      tags: ["Games"]
      operationId: addUser
      summary: Add a user to a game
      description: |
        Add the user with userId uid to the game with gameId gid.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Added user to game successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Games"]
      operationId: removeUser
      summary: Remove a user from a game
      description: |
        Remove the user with userId uid from the game with gameId gid.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Removed user from game successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /games/{gid}/start:
    parameters:
      - $ref: "#/components/parameters/gameId"
    put:
      tags: ["Games"]
      operationId: startGame
      summary: Start a previously created game
      description: |
        Start the game with gameId gid.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Started game successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /games/{gid}/catch:
    parameters:
      - $ref: "#/components/parameters/gameId"
    post:
      tags: ["Games"]
      operationId: catchUser
      summary: Catch another user
      description: |
        Upload a new catch made by the user.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  catch:
                    $ref: "#/components/schemas/catch"
        required: true
      responses:
        "201": { description: Posted catch successfully}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /games/{gid}/catch/proof:
    parameters:
      - $ref: "#/components/parameters/gameId"
    post:
      tags: ["Games"]
      operationId: proofCatch
      summary: Upload a catch proof to the server.
      description: |
        Upload a picture of the catched players face to the server to proof the catch.
        Returns the pictureId of the uploaded picture to link it to the catch.
      security:
        - bearerAuth: []
      requestBody:
        description: The proof picture of a catch
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image/jpeg:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 100000000
        required: true
      responses:
        "201":
          description: Proof upload successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  pictureId:
                    $ref: "#/components/schemas/id"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /games/{gid}/catch/proof/{pid}:
    parameters:
      - $ref: "#/components/parameters/gameId"
      - $ref: "#/components/parameters/pictureId"    
    get:
      tags: ["Games"]
      operationId: getProofPicture
      summary: Get a catches proof picture.
      description: |
        Get the proof picture with the pictureId pid from the game with gameId gid.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Received picture successfully
          content:
            image/jpeg:
              schema:
                description: "A jpeg proof picture"
                type: string
                format: binary
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
components:
  parameters:
    userId:
      schema:
        $ref: "#/components/schemas/userId"
      name: uid
      in: path
      required: true
      description: The userId (uid) is a string, that uniquely identifies a user
    gameId:
      schema:
        $ref: "#/components/schemas/id"
      name: gid
      in: path
      required: true
      description: The gameId (gid) is a string, that uniquely identifies a game.
    pictureId:
      schema:
        $ref: "#/components/schemas/id"
      name: pid
      in: path
      required: true
      description: The pictureId (pid) is a string, that uniquely identifies a winning picture.
      
  schemas:
    id:
      description: "An Id to identify an object"
      type: string
      pattern: "[a-zA-z0-9-_]{11}"
      example: "gocwRvLhDf8"
      readOnly: true
      minLength: 11
      maxLength: 11
    userId:
      description: "An userId is a unique identifier made to identify users"
      type: string
      pattern: "@[a-zA-z0-9_.]{3,16}"
      example: "@Alan_Turing"
      minLength: 3
      maxLength: 18
    location:
      type: object
      description: "A location on earth represented by latitude and longitude"
      properties:
        latitude:
          description: "The latitude of the location"
          type: integer 
        longitude:
          description: "The longitude of the location"
          type: integer 
    time:
      description: "Stores an amount of time"
      type: string
      pattern: "[0-9]{2}:[0-9]{2}:[0-9]{2}"
      example: "01:30:00"
      minLength: 8
      maxLength: 8
    user:
      type: object
      description: "A user"
      properties:
        userId:
          $ref: "#/components/schemas/userId"
        location:
          $ref: "#/components/schemas/location"
        caughtBy:
          $ref: "#/components/schemas/userId"
        pictureId:
          $ref: "#/components/schemas/id"
    catch:
      type: object
      description: "A catch that happened in the game"
      properties:
        catcher:
          $ref: "#/components/schemas/userId"
        caught:
          $ref: "#/components/schemas/userId"
        pictureId:
          $ref: "#/components/schemas/id"
    gameState:
      description: "The state of a game"
      type: object
      properties:
        gameId:
          $ref: "#/components/schemas/id"
        state:
          description: "The state the game is currently in"
          type: string
          enum: [created, running, finished]
        timeleft:
          $ref: "#/components/schemas/time"
        players:
          description: "The list of users in the game"
          type: array
          minItems: 1
          maxItems: 64
          items:
            $ref: "#/components/schemas/user"
        
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    UnauthorizedRequest:
      description: |-
        The requesting party was not authorized to access the resource.
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs.
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer